{
  "name": "grunt-protractor-runner",
  "description": "A Grunt plugin for running protractor runner.",
  "version": "0.1.9",
  "homepage": "https://github.com/teerapap/grunt-protractor-runner",
  "author": {
    "name": "Teerapap Changwichukarn",
    "email": "teerapap.c@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/teerapap/grunt-protractor-runner.git"
  },
  "bugs": {
    "url": "https://github.com/teerapap/grunt-protractor-runner/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/teerapap/grunt-protractor-runner/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1",
    "protractor": ">=0.10.0-0 <1.0.0"
  },
  "keywords": [
    "gruntplugin",
    "protractor",
    "selenium",
    "angular",
    "angularjs"
  ],
  "readme": "# grunt-protractor-runner\n\n> A Grunt plugin for running [Protractor](https://github.com/angular/protractor) runner.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1` and Protractor `>=0.10.0-0 <1.0.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-protractor-runner --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-protractor-runner');\n```\n\n## The \"protractor\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `protractor` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  protractor: {\n    options: {\n      configFile: \"node_modules/protractor/referenceConf.js\", // Default config file\n      keepAlive: true, // If false, the grunt process stops when the test fails.\n      args: {\n        // Arguments passed to the command\n      }\n    },\n    your_target: {\n      configFile: \"e2e.conf.js\", // Target-specific config file\n      options: {\n        args: {} // Target-specific arguments\n      }\n    },\n  },\n})\n```\n\n### Options\n\n#### options.configFile\nType: `String`\nDefault value: `node_modules/protractor/referenceConf.js`\n\nA protractor config file.\n\n#### options.keepAlive\nType: `Boolean`\nDefault value: `true`\n\nIf true, grunt process continues even if the test fails. This option is useful when using with grunt watch.\nIf false, grunt process stops when the test fails.\n\n#### options.debug\nType: `Boolean`\nDefault value: `false`\n\nIf true, grunt will pass 'debug' as second argument to protractor CLI to enable node CLI debugging as described in [Protractor Debugging documentation](https://github.com/angular/protractor/blob/master/docs/debugging.md).\n\n#### options.args\nType: `Object`\nDefault value: `{}`\n\nArguments passed to the command. These arguments can also be supplied via command-line too. Ex.`grunt protractor --specs=specs/some-test.js`\nSupported arguments are below.\n\n* seleniumAddress `string`: A running selenium address to use\n* seleniumServerJar `string`: Location of the standalone selenium server .jar file\n* seleniumPort `string`: Optional port for the standalone selenium server\n* baseUrl `string`: URL to prepend to all relative paths\n* rootElement `string`: Element housing ng-app, if not html or body\n* specs `array`: Array of spec files to test. Ex. `[\"spec1.js\",\"spec2.js\"]`\n* includeStackTrace `boolean`: Print stack trace on error\n* verbose `boolean`: Print full spec names\n* browser `string`: Browser name, e.g. chrome or firefox\n* params `object`: Param object to be passed to the test as browser.params\n* chromeDriver `string`: Location of chrome driver overridng the property in config file\n\n## Tests\n\nAfter `npm install`, you need to run script `node_modules/protractor/bin/install_selenium_standalone` to download\nselenium to `selenium/`.\n\nThen run `grunt` or `npm test` to test the module. You will encounter these.\n\n* It opens chrome a couple of times without warnings or errors.\n* A test task fails but the test process keeps alive and continues to the next test tasks.\n* It will launch the node debugger. You'll need to enter c a few times to progress through a few breakpoints, and then when it succeed, press Ctrl-c 2 times to exit the debugger to continue other test tasks.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* 0.1.9 \n  * Able to supply options.args via command-line arguments (#20)\n  * Fixed merging task-level and target-level options\n* 0.1.8 - Support --chromeDriver in options.args (#17)\n* 0.1.7 - Support --browser and --params arguments passed to the protractor command using config in options.args (#12)\n* 0.1.6 - Change protractor(peerDependencies) to support version to 0.x (#8, #9, #10)\n* 0.1.5 - Added `options.debug` (#7)\n* 0.1.4 - Change protractor(peerDependencies) to support version to 0.10.x - 0.11.x (#6)\n* 0.1.3 - Fixed Windows command\n* 0.1.2 - Added keepAlive option.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-protractor-runner@0.1.9",
  "dist": {
    "shasum": "0525cdda474e5a9fbabe619cd34194653ca646a5"
  },
  "_from": "grunt-protractor-runner@",
  "_resolved": "https://registry.npmjs.org/grunt-protractor-runner/-/grunt-protractor-runner-0.1.9.tgz"
}
